{"version":3,"sources":["components/ButtonGrid.js","components/App.js","index.js"],"names":["ButtonGrid","handleClick","className","map","value","onClick","App","useState","alertMsg","setAlertMsg","prevInput","setPrevInput","currInput","setCurrInput","alertIsTrue","length","e","target","inputArr","slice","backspace","Number","i","splice","join","toString","handlePercentage","result","round","evaluate","replace","handleCalculate","ReactDOM","render","document","querySelector"],"mappings":"6MAyBeA,EAvBI,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAUpB,OACE,qBAAKC,UAAU,WAAf,SATe,CACf,KAAM,SAAK,IAAK,SAChB,IAAK,IAAK,IAAK,SACf,IAAK,IAAK,IAAK,MACf,IAAK,IAAK,IAAK,MACf,IAAK,IAAK,cAKEC,KAAI,SAACC,GACb,OACE,wBAAQC,QAASJ,EAAaG,MAAOA,EAArC,SACGA,GAD8CA,S,eC6E5CE,G,MAxFH,WACV,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAkCJ,mBAAS,KAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KAmEMC,EAAcN,EAASO,OAAS,EAEtC,OACE,sBAAKb,UAAU,YAAf,UACE,gEACA,sBAAKA,UAAU,aAAf,UACE,qBAAIA,UAAU,UAAd,UACE,sBAAMA,UAAS,2BAAsBY,EAAc,YAAc,IAAjE,SACGA,EAAcN,EAAWE,IAE5B,sBAAMR,UAAU,kBAAhB,SAAmCU,OAErC,cAAC,EAAD,CAAYX,YApCE,SAACe,GACnB,OAAQA,EAAEC,OAAOb,OACf,IAAK,KA1CPO,EAAa,IACbE,EAAa,KACbJ,EAAY,IA0CR,MACF,IAAK,UAxCS,WAChBA,EAAY,IACZ,IAAIS,EAAQ,YAAON,GACmB,MAAlCM,EAASA,EAASH,OAAS,GAC7BF,EAAaD,EAAUO,MAAM,GAAI,IAEjCN,EAAaD,EAAUO,MAAM,GAAI,IAmC/BC,GACA,MACF,IAAK,KAjCgB,WACvB,IAAIF,EAAQ,YAAON,GACnB,GAAKS,OAAOH,EAASA,EAASH,OAAS,KAAyC,MAAlCG,EAASA,EAASH,OAAS,IAIzE,IAAK,IAAIO,EAAIJ,EAASH,OAAS,EAAGO,GAAK,EAAGA,IACxC,GAAoB,MAAhBJ,EAASI,GAAY,CACvB,IAAMlB,EAASc,EAASK,OAAOD,EAAI,GAAGE,KAAK,IAAO,IAClDX,EAAaK,EAASM,KAAK,IAAMpB,EAAMqB,YACvC,YAPFhB,EAAY,kBA+BViB,GACA,MACF,IAAK,cArBe,WACtB,IACE,IAAMC,EAASC,aAAMC,YAASjB,EAAUkB,QAAQ,OAAK,KAAKA,QAAQ,OAAK,MAAO,GAC9EnB,EAAaC,GACbC,EAAa,IAAMc,EAAOF,YAC1B,SACAhB,EAAY,mBAgBVsB,GACA,MACF,QACE,GAAInB,EAAUG,OAAS,GAErB,YADAN,EAAY,sBAGdA,EAAY,IACZI,EAAaD,EAAYI,EAAEC,OAAOb,mBCnE1C4B,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.9037737b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst ButtonGrid = ({ handleClick }) => {\n  // prettier-ignore\n  const valueArr = [\n    \"AC\", \"‚Üê\", \"%\", \" √∑ \", \n    \"7\", \"8\", \"9\", \" √ó \",\n    \"4\", \"5\", \"6\", \" - \",\n    \"1\", \"2\", \"3\", \" + \",\n    \".\", \"0\", \"Calculate!\",\n  ];\n\n  return (\n    <div className=\"btn-grid\">\n      {valueArr.map((value) => {\n        return (\n          <button onClick={handleClick} value={value} key={value}>\n            {value}\n          </button>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default ButtonGrid;\n","import React, { useState } from \"react\";\nimport ButtonGrid from \"./ButtonGrid\";\nimport { round, evaluate } from \"mathjs\";\nimport \"./style.css\";\n\nconst App = () => {\n  const [alertMsg, setAlertMsg] = useState(\"\");\n  const [prevInput, setPrevInput] = useState(\"\");\n  const [currInput, setCurrInput] = useState(\" \");\n\n  const clearInput = () => {\n    setPrevInput(\"\");\n    setCurrInput(\" \");\n    setAlertMsg(\"\");\n  };\n\n  const backspace = () => {\n    setAlertMsg('');\n    let inputArr = [...currInput];\n    if (inputArr[inputArr.length - 1] === \" \") {\n      setCurrInput(currInput.slice(0, -3));\n    } else {\n      setCurrInput(currInput.slice(0, -1));\n    }\n  };\n\n  const handlePercentage = () => {\n    let inputArr = [...currInput];\n    if (!Number(inputArr[inputArr.length - 1]) && inputArr[inputArr.length - 1] !== \"0\") {\n      setAlertMsg('Invalid Input!');\n      return;\n    }\n    for (let i = inputArr.length - 1; i >= 0; i--) {\n      if (inputArr[i] === \" \") {\n        const value = (inputArr.splice(i + 1).join(\"\")) / 100;\n        setCurrInput(inputArr.join(\"\") + value.toString());\n        break;\n      }\n    }\n  };\n\n  const handleCalculate = () => {\n    try {\n      const result = round(evaluate(currInput.replace('√ó', '*').replace('√∑', '/')), 2);\n      setPrevInput(currInput)\n      setCurrInput(\" \" + result.toString());\n    } catch {\n      setAlertMsg('Invalid Input!')\n    }\n  };\n\n  const handleClick = (e) => {\n    switch (e.target.value) {\n      case \"AC\":\n        clearInput();\n        break;\n      case \"‚Üê\":\n        backspace();\n        break;\n      case \"%\":\n        handlePercentage();\n        break;\n      case \"Calculate!\":\n        handleCalculate();\n        break;\n      default:\n        if (currInput.length > 31) {\n          setAlertMsg('Input is too long!')\n          return;\n        };\n        setAlertMsg('');\n        setCurrInput(currInput + e.target.value);\n    }\n  };\n\n  const alertIsTrue = alertMsg.length > 0;\n\n  return (\n    <div className=\"container\">\n      <h1>Simple Calculator üßÆ</h1>\n      <div className=\"calculator\">\n        <h2 className=\"display\">\n          <span className={`display-previous ${alertIsTrue ? \"alert-msg\" : \"\"}`}>\n            {alertIsTrue ? alertMsg : prevInput}\n          </span>\n          <span className=\"display-current\">{currInput}</span>\n        </h2>\n        <ButtonGrid handleClick={handleClick} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.querySelector('#root'));"],"sourceRoot":""}